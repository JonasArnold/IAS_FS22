<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{caf6b19d-e3e3-45a7-b09b-0ecd654a40e5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	f_Result 			:	REAL;
	i_Counter			: 	INT;
	f_RandomArray		: 	ARRAY[1..10] OF REAL := [5.0, 3.5, 4.6, 1.2, 13, 5.4, 5.6, 11.0, 15.6, 10];
	f_Product			: 	REAL;
	f_Sum 				: 	REAL;
	
	edgeDetectorBtnY	:   Fb_EdgeDetector;
	edgeDetectorBtnB	:   Fb_EdgeDetector;
	t_ToggleTime		: 	TIME := T#333MS;	// 1/Hz = [s]
	t_lastToggle		: 	TIME := TIME();
	togglingMode		: 	En_ToggleMode := En_ToggleMode.Off;
	b_LampR_On			: 	BOOL := FALSE;
	b_LampG_On			: 	BOOL := FALSE;
	
	ultraSonicSensorFb	:	Fb_UltrasonicSensor;
	
	a_lastValues		: 	ARRAY [1..NUM_STORED_VALS] OF REAL; 
	r_meanVal			: 	REAL := 0;
	fb_MeanCalc			: 	Fb_MeanCalculatorWForgettingFactor;
	r_forgettingFactor	: 	REAL := 0.5;
END_VAR
VAR CONSTANT
	NUM_STORED_VALS		: INT := 300;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Aufgabe 1
f_Result := FUN_Add(1.3, 1.5);
f_Result := FUN_Add(3.3, 1000.5);
f_Result := FUN_Add(5.5, 51.5);

f_Result := FUN_Substract(1.3, 1);
f_Result := FUN_Substract(1.3, 2);

f_Result := FUN_Multiply(3, 1000);
f_Result := FUN_Multiply(55, 5.55);

f_Result := FUN_Divide(9, 3);
f_Result := FUN_Divide(55, 0);


// Aufgabe 3
// Call program
PRG_DoSomeMath.f_Inp1 := 1.5;
PRG_DoSomeMath.f_Inp2 := 5.4;
PRG_DoSomeMath();
// Access program variables
f_Result := PRG_DoSomeMath.f_AddResult;
i_Counter := PRG_DoSomeMath.i_CallCounter;


// Aufgabe 7 & 8
// insert first values
f_Product := f_RandomArray[1];
f_Sum := f_RandomArray[1];
// for loop
FOR i_Counter := 2 TO 10 DO
	f_Product 	:= f_Product * f_RandomArray[i_Counter];
	f_Sum		:= f_Sum + f_RandomArray[i_Counter];
END_FOR

// Aufgabe 9
// insert first values
f_Product := f_RandomArray[1];
f_Sum := f_RandomArray[1];
i_Counter := 2;
// while loop
WHILE i_Counter <= 10 DO
	f_Product 	:= f_Product * f_RandomArray[i_Counter];
	f_Sum		:= f_Sum + f_RandomArray[i_Counter];
	i_Counter 	:= i_Counter + 1;
END_WHILE

// Aufgabe 10
// insert first values
f_Product := f_RandomArray[1];
f_Sum := f_RandomArray[1];
i_Counter := 2;
// do while loop = repeat loop
REPEAT
	f_Product 	:= f_Product * f_RandomArray[i_Counter];
	f_Sum		:= f_Sum + f_RandomArray[i_Counter];
	i_Counter 	:= i_Counter + 1;
UNTIL i_Counter > 10
END_REPEAT


// Aufgabe 11 and 12
edgeDetectorBtnY(inputValue := GVL_IO.DI_BtnYellow);
edgeDetectorBtnB(inputValue := GVL_IO.DI_BtnBlue);

// double press?
IF edgeDetectorBtnB.doublePress OR edgeDetectorBtnY.doublePress THEN
	t_ToggleTime := t_ToggleTime / 2;  // double frequency
END_IF

// triple press?
IF edgeDetectorBtnB.triplePress OR edgeDetectorBtnY.triplePress THEN
	t_ToggleTime := t_ToggleTime * 2;  // half frequency
END_IF

CASE togglingMode OF
	
	/// CASE OFF ///
	En_ToggleMode.Off:
	// lamp actions
	b_LampR_On := FALSE;
	b_LampG_On := FALSE;
	t_ToggleTime := T#333MS; // reset to default time
	
	// switch mode
	IF edgeDetectorBtnY.risingEdge THEN
		togglingMode := En_ToggleMode.Simulataneous;
	END_IF
	IF edgeDetectorBtnB.risingEdge THEN 
		togglingMode := En_ToggleMode.Alternating;
		b_LampG_On := TRUE;  // initial lamp on => alternating
	END_IF
	
	/// CASE Simulataneous ///
	En_ToggleMode.Simulataneous:
	// lamp actions
	IF((t_lastToggle + t_ToggleTime) < TIME()) THEN
		b_LampR_On := NOT b_LampR_On;
		b_LampG_On := NOT b_LampG_On;
		t_lastToggle := TIME();
	END_IF
	
	// switch mode
	IF edgeDetectorBtnY.risingEdge THEN
		togglingMode := En_ToggleMode.Off;
	END_IF
	

	/// CASE ALTERNATING ///
	En_ToggleMode.Alternating:
	// lamp actions
	IF((t_lastToggle + t_ToggleTime) < TIME()) THEN
		b_LampR_On := NOT b_LampR_On;
		b_LampG_On := NOT b_LampG_On;
		t_lastToggle := TIME();
	END_IF
	
	// switch mode
	IF edgeDetectorBtnB.risingEdge THEN
		togglingMode := En_ToggleMode.Off;
	END_IF

	
END_CASE


GVL_IO.DO_LampRed := b_LampR_On;
GVL_IO.DO_LampGreen := b_LampG_On;


// Aufgabe 13
ultraSonicSensorFb(	i_UltraSonicAnalogInput := GVL_IO.AI_UltraSonicSensor, 
					e_DistanceMode := En_DistanceMode.NearerIsHigher);
GVL_IO.AO_AnalogGauge := ultraSonicSensorFb.i_AnalogOutput;

// Aufgabe 14
FUN_ShiftLeft(a_Values := a_lastValues);  // shift array left
a_lastValues[NUM_STORED_VALS] := ultraSonicSensorFb.r_VoltageUltraSonicSensor;  // store last value

// Aufgabe 15
fb_MeanCalc(r_inputValue := ultraSonicSensorFb.r_VoltageUltraSonicSensor, r_forgettingFactor := r_forgettingFactor);
r_meanVal := fb_MeanCalc.r_meanValueOutput;
GVL_IO.AO_AnalogGauge := FUN_0to10V_TO_INT(r_AnalogValue0to10V := r_meanVal);
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="483" Count="142" />
      <LineId Id="415" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>